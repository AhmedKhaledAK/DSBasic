*B-trees are "balanced" search trees designed to work well on disks and other direct-access
secondary storage devices.

*B-trees differ from red-black trees in that B-trees nodes may have many children, from a few to
thousands. That is, the branching factor of B-trees can be quite large. B-trees are similar to
red-black trees in that every n-node B-tree has height O(lgn).

*If an internal B-tree node x contains x.n keys, then x has x.n + 1 children.

*When searching for an element in a B-tree, we make (x.n + 1)-way decision based on comparisons
with the x.n keys stored at node x.

*In a typical B-tree application, the amount of data handled is so large that all the data do not
fit into main memory at once. The B-tree algorithms copy selected pages from disk into main memory
as needed and write back onto disk the pages that have changed.

*B-tree algorithms keep only a constant number of pages in main-memory at any time; thus, the size
of main-memory does not limit the size of B-trees that can be handled.

*Since in most systems the running time of a B-tree algorithm depends primarily on the number of
DISK-READ and DISK-WRITE operations it performs, we typically want each of these operations to read
or write as much information as possible.

*All leaves have the same depth, which is the tree's height h.

*Nodes have a lower and upper bounds on the number of keys they can contain. We express these
bounds in terms of a fixed integer t >= 2 called the minimum degree of the B-tree.

*Every internal node in a B-tree must be at least half full.

*B-trees grows and shrinks from the root.

*Much larger values of the minimum degree yield B-trees of smaller height.

*Searching a B-tree is much like searching a binary search tree, except that instead of making
a two-way branching decision at each node, we make a multiway branching decision according to
the number of the node's children.

*We cannot simply create a new leaf node and insert it,as the resulting tree would fail to be a
valid B-Tree (as the height will not be lgn). Instead, we insert the new key into an existing leaf
node. Since we cannot insert a key into leaf that is full, we split the node around its median into
two nodes having only t-1 keys (the minimum number of keys a node can have).